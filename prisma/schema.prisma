// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Listing[]
  profile       Profile?
  pets          Pet[]
  accounts      Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Pet {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId   String    @db.ObjectId
  name     String?
  age      Int?
  kind     String?
  breed    String?
  imageSrc String?
  gender   String    @default(value: "male")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  category    String   @default("sale")
  description String?
  price       Int?
  gender      String?
  name        String?
  age         Int?
  kind        String?
  breed       String?
  location    String?
  imageSrc    String?
  firstImage  String?
  secondImage String?
  thirdImage  String?
  fourthImage String?

  author User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @unique @db.ObjectId
  name    String?
  surname String?
  country String?
  city    String?
  address String?
  zip     Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
